// Mocks generated by Mockito 5.3.2 from annotations
// in oblivion_skill_diary/test/pages/character_selection_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oblivion_skill_diary/model/character.dart' as _i5;
import 'package:oblivion_skill_diary/provider/state_provider.dart' as _i3;
import 'package:oblivion_skill_diary/services/database_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseService_0 extends _i1.SmartFake
    implements _i2.DatabaseService {
  _FakeDatabaseService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStateProvider extends _i1.Mock implements _i3.StateProvider {
  MockStateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseService get dbService => (super.noSuchMethod(
        Invocation.getter(#dbService),
        returnValue: _FakeDatabaseService_0(
          this,
          Invocation.getter(#dbService),
        ),
      ) as _i2.DatabaseService);
  @override
  set dbService(_i2.DatabaseService? _dbService) => super.noSuchMethod(
        Invocation.setter(
          #dbService,
          _dbService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<dynamic> get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  set isInitialized(_i4.Future<dynamic>? _isInitialized) => super.noSuchMethod(
        Invocation.setter(
          #isInitialized,
          _isInitialized,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i4.Future<List<_i5.Character>> getAllCharacters() => (super.noSuchMethod(
        Invocation.method(
          #getAllCharacters,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Character>>.value(<_i5.Character>[]),
      ) as _i4.Future<List<_i5.Character>>);
  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
